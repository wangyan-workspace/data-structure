/**
 *
 * @param {*} n 楼梯数，需要 n 阶你才能到达楼顶。
 * @param {*} m 每次你可以爬至多m (1 <= m < n)个台阶
 * @returns
 */
var climbStairs = (n, m) => {
  let dp = new Array(n + 1).fill(0); // 初始化，dp[j]表示楼梯数为j时的方法数
  dp[0] = 1; // 初始化dp[0]为1，因为当楼梯数为0时，只有一种方法，即不爬
  // 排列题，注意循环顺序，背包在外物品在内
  for (let j = 1; j <= n; j++) {
    // 遍历背包
    for (let i = 1; i <= m; i++) {
      // 遍历物品
      if (j - i >= 0) {
        // 判断是否可以放入
        // 等同于dp[j] = dp[j] + dp[j - i];
        dp[j] += dp[j - i];
      }
    }
  }

  return dp[n]; // 返回dp[n]即为爬楼梯的方法数
};
console.log(climbStairs(3, 2));
/**
 * 当 m = 2，n = 3 时，n = 3 这表示一共有三个台阶，m = 2 代表你每次可以爬一个台阶或者两个台阶。
 * 此时你有三种方法可以爬到楼顶。
 * 1 阶 + 1 阶 + 1 阶段
 * 1 阶 + 2 阶
 * 2 阶 + 1 阶
 */
