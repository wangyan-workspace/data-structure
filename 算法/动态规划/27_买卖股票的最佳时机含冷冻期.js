/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function (prices) {
  const len = prices.length; // 天数

  if (len < 2) {
    // 天数小于2，无法交易
    return 0;
  } else if (len < 3) {
    // 天数小于3，只能交易一次
    return Math.max(0, prices[1] - prices[0]);
  }
  // 0: 持有 => 持有股票状态（今天买入股票，或者是之前就买入了股票然后没有操作，一直持有）
  // 1: 不持有  => 保持卖出股票的状态（两天前就卖出了股票，度过一天冷冻期。或者是前一天就是卖出股票状态，一直没操作）
  // 2: 不持有（今天卖出）=> 今天卖出股票，明天是冷冻期
  // 3: 不持有（冷冻期）=> 今天为冷冻期状态，但冷冻期状态不可持续，只有一天！
  let dp = new Array(len).fill().map(() => new Array(4).fill(0));
  dp[0][0] = -prices[0];

  for (let i = 1; i < len; i++) {
    // 0: 持有 => 前一天也是持有状态，或者今天买入股票（前一天是冷冻期状态，或者前一天是保持卖出股票的状态）
    // 持有状态那天的持有的最大金额，即取前一天是持有状态、或者前一天是冷冻期状态 - 买入股票所花费的价钱、或者前一天是保持卖出股票的状态 - 买入股票所花费的价钱的最大值
    dp[i][0] = Math.max(
      dp[i - 1][0],
      dp[i - 1][1] - prices[i],
      dp[i - 1][3] - prices[i]
    );
    // 1: 不持有（保持卖出状态）=> 前一天也是卖出状态，或者前一天是冷冻期状态,保持卖出状态的那天持有的最大金额，即取前一天是卖出状态和前一天是冷冻期状态的最大值
    dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][3]);
    // 2: 不持有（今天卖出）=> 今天卖出的那天持有的最大金额，即前一天是持有状态 + 今天卖出的金额
    dp[i][2] = dp[i - 1][0] + prices[i];
    // 3: 不持有（冷冻期）=> 冷冻期的那天持有的最大金额，即前一天是不持有且卖出状态
    dp[i][3] = dp[i - 1][2];
  }

  return Math.max(dp[len - 1][1], dp[len - 1][2], dp[len - 1][3]); // 最后一天持有状态肯定不是最大利润，最后一天的最大利润在最后一天不持有状态中
};
